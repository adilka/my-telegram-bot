import os
import random
import httpx
import threading
from datetime import time
from http.server import BaseHTTPRequestHandler, HTTPServer

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, JobQueue

BOT_TOKEN = os.getenv("BOT_TOKEN")

# –¢–≤–æ–∏ —Ü–µ–ª–∏
goals_text = """\
–£–ª—É—á—à–∞—Ç—å –¥–µ–≤–æ–ø—Å
–î–µ–ª–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (–∏–≥—Ä—É)
–í—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
–ó–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º
–ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É
–°–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É
–°–º–æ—Ç—Ä–µ—Ç—å —Ä–æ–ª–∏–∫–∏ –≤ —é—Ç—É–±–µ (–±–µ–∑ –≤–∏–Ω—ã)
–ñ–∏—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ, –Ω–µ –¥—Ä–æ—á–∏—Ç—å
–ë–æ–≥–∞—Ç—Å—Ç–≤–æ –∏ –¥–æ–±—Ä–æ—Ç–∞ ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
–ë—É–¥—å —Å–æ–±–æ–π, –≥–æ–≤–æ—Ä–∏ —á–µ—Å—Ç–Ω–æ, –∏–¥–∏ —Å–≤–æ–∏–º –ø—É—Ç—ë–º
–ü–µ—Ä–µ—Å—Ç–∞–Ω—å –±—ã—Ç—å "—Å–ª–∞–±—ã–º —Ä–µ–±—ë–Ω–∫–æ–º", —Ç—ã –≤–∑—Ä–æ—Å–ª—ã–π
–ù–µ –ª–µ–Ω–∏—Å—å, —Å–ª—É—à–∞–π –±–ª–∏–∑–∫–∏—Ö
–†–∞–¥—É–π—Å—è –º–æ–º–µ–Ω—Ç—É, —Ü–µ–Ω–∏ –∂–∏–∑–Ω—å
–£–¥–∞–ª–∏ Instagram, –Ω–µ —Å–ª–∏–≤–∞–π —Ñ–æ–∫—É—Å
–ù–µ –±—É–¥—å —Ç–æ–∫—Å–∏—á–Ω—ã–º, –∑–Ω–∞–π –≥—Ä–∞–Ω–∏—Ü—ã
–†–∞–∑–≤–∏–≤–∞–π —Ä–µ—á—å –∏ –¥–∏–∫—Ü–∏—é
–ú–æ–∑–≥ –ª—é–±–∏—Ç –∏–ª–ª—é–∑–∏–∏ ‚Äî –Ω–æ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –ø—É—Ç—å
–ú–æ–π –¥–µ–≤–∏–∑ ‚Äî –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
"""

daily_checklist = [
    "‚úÖ –û—Ç–∂–∏–º–∞–Ω–∏—è (15 –º–∏–Ω +1 —Ä–∞–∑ –∫–∞–∂–¥—ã–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å)",
    "‚úÖ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–°–º–æ—Ç—Ä–µ—Ç—å —Ä–æ–ª–∏–∫–∏ –Ω–∞ –∞–Ω–≥–ª)",
    "‚úÖ 1 –∑–∞–¥–∞—á–∞ –ø–æ –¥–µ–≤–æ–ø—Å—É –∫–∞–∂–¥—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å",
    "‚úÖ 15 –º–∏–Ω—É—Ç –∫–Ω–∏–≥–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
    "‚úÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–æ–±—Ä–∞",
    "‚úÖ –†–∞–¥–æ—Å—Ç—å + —Ç–∏—à–∏–Ω–∞"
]

affirmations = goals_text.strip().splitlines()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    [
        ["–°–µ–≥–æ–¥–Ω—è", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"],
        ["–¶–µ–ª–∏", "Joke üòà"]
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! –Ø –±–æ—Ç-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫.\n–í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:", reply_markup=main_keyboard)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–°–µ–≥–æ–¥–Ω—è":
        tasks = "\n".join(daily_checklist)
        await update.message.reply_text(f"üìù –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{tasks}")
    elif text == "–ú–æ—Ç–∏–≤–∞—Ü–∏—è":
        quote = random.choice(affirmations)
        await update.message.reply_text(f"üéØ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è:\n{quote}")
    elif text == "–¶–µ–ª–∏":
        await update.message.reply_text(goals_text)
    elif text == "Joke üòà":
        joke = await fetch_dark_joke()
        await update.message.reply_text(joke)
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ ‚¨ÜÔ∏è")

# –®—É—Ç–∫–∏ —Å —á—ë—Ä–Ω—ã–º —é–º–æ—Ä–æ–º
async def fetch_dark_joke():
    url = "https://v2.jokeapi.dev/joke/Dark?type=twopart"
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url)
            data = response.json()
            return f"üòà {data['setup']}\nüëâ {data['delivery']}"
    except Exception:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å chat_id)
async def morning_reminder(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=context.job.chat_id, text="üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–µ –∑–∞–±—É–¥—å: /start ‚Üí –°–µ–≥–æ–¥–Ω—è")

async def evening_reflection(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=context.job.chat_id, text="üåô –í–µ—á–µ—Ä! –ü–æ–¥—É–º–∞–π: —á—Ç–æ —É–¥–∞–ª–æ—Å—å –∏ —á—Ç–æ —É–ª—É—á—à–∏—Ç—å.")

# –§–µ–π–∫–æ–≤—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
class DummyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'OK')

def run_fake_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("", port), DummyHandler)
    print(f"Fake HTTP server running on port {port}")
    server.serve_forever()

threading.Thread(target=run_fake_server, daemon=True).start()

# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    job_queue: JobQueue = app.job_queue

    # ‚úÖ –ó–∞–º–µ–Ω–∏ chat_id –Ω–∞ —Å–≤–æ–π (–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–µ—à—å —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —á–µ—Ä–µ–∑ update.effective_chat.id)
    job_queue.run_daily(morning_reminder, time=time(hour=5, minute=0), chat_id=430893419)     # 08:00 –ê–ª–º–∞—Ç—ã
    job_queue.run_daily(evening_reflection, time=time(hour=14, minute=30), chat_id=430893419) # 21:30 –ê–ª–º–∞—Ç—ã

    app.run_polling()
