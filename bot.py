import os
import random
import httpx
import asyncio
import threading
from datetime import time
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    filters
)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –¢–≤–æ–∏ —Ü–µ–ª–∏
goals_text = """\
–£–ª—É—á—à–∞—Ç—å –¥–µ–≤–æ–ø—Å
–ñ–∏—Ç—å –ø–æ –≥—Ä–∞—Ñ–∏–∫—É
–í—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
–ó–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º
–ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É
–°–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É
–£–º–µ—Ç—å –æ—Ç–¥—ã—Ö–∞—Ç—å
–ñ–∏—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ –∏ —Ä–∞–∑–º–µ—Ä–µ–Ω–Ω–æ
–ë–æ–≥–∞—Ç—Å—Ç–≤–æ –∏ –¥–æ–±—Ä–æ—Ç–∞ ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
–ë—É–¥—å —Å–æ–±–æ–π, –≥–æ–≤–æ—Ä–∏ —á–µ—Å—Ç–Ω–æ, –∏–¥–∏ —Å–≤–æ–∏–º –ø—É—Ç—ë–º
–ü–µ—Ä–µ—Å—Ç–∞—Ç—å —Å—Ç—Ä–∞–¥–∞—Ç—å, —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –º–µ–ª–æ—á–∞–º –∏ —Ü–µ–Ω–∏—Ç—å –∂–∏–∑–Ω—å
–ù–µ –ª–µ–Ω–∏—Å—å, —Å–ª—É—à–∞–π –±–ª–∏–∑–∫–∏—Ö
–†–∞–¥—É–π—Å—è –º–æ–º–µ–Ω—Ç—É
–£–±–µ—Ä–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
–ù–µ –±—É–¥—å —Ç–æ–∫—Å–∏—á–Ω—ã–º, –∑–Ω–∞–π –≥—Ä–∞–Ω–∏—Ü—ã
–†–∞–∑–≤–∏–≤–∞–π —Ä–µ—á—å –∏ –¥–∏–∫—Ü–∏—é
–ú–æ–∑–≥ –ª—é–±–∏—Ç –∏–ª–ª—é–∑–∏–∏ ‚Äî –Ω–æ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –ø—É—Ç—å
–ú–æ–π –¥–µ–≤–∏–∑ ‚Äî –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
"""
# –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –∏ –¥–∞–Ω–Ω—ã–µ
goals_text = (
    "–£–ª—É—á—à–∞—Ç—å –¥–µ–≤–æ–ø—Å\n"
    "–ñ–∏—Ç—å –ø–æ –≥—Ä–∞—Ñ–∏–∫—É\n"
    "–í—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
    "–ó–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º\n"
    "–ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É\n"
    "–°–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É\n"
    "–£–º–µ—Ç—å –æ—Ç–¥—ã—Ö–∞—Ç—å\n"
    "–ñ–∏—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ –∏ —Ä–∞–∑–º–µ—Ä–µ–Ω–Ω–æ\n"
    "–ë–æ–≥–∞—Ç—Å—Ç–≤–æ –∏ –¥–æ–±—Ä–æ—Ç–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n"
    "–ë—É–¥—å —Å–æ–±–æ–π, –≥–æ–≤–æ—Ä–∏ —á–µ—Å—Ç–Ω–æ, –∏–¥–∏ —Å–≤–æ–∏–º –ø—É—Ç—ë–º\n"
    "–ü–µ—Ä–µ—Å—Ç–∞—Ç—å —Å—Ç—Ä–∞–¥–∞—Ç—å, –Ω—É–∂–Ω–æ —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –º–µ–ª–æ—á–∞–º –∏ —Ü–µ–Ω–∏—Ç—å –∂–∏–∑–Ω—å\n"
    "–ù–µ –ª–µ–Ω–∏—Å—å, —Å–ª—É—à–∞–π –±–ª–∏–∑–∫–∏—Ö\n"
    "–†–∞–¥—É–π—Å—è –º–æ–º–µ–Ω—Ç—É, —Ü–µ–Ω–∏ –∂–∏–∑–Ω—å\n"
    "–£–±–µ—Ä–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏\n"
    "–ù–µ –±—É–¥—å —Ç–æ–∫—Å–∏—á–Ω—ã–º, –∑–Ω–∞–π –≥—Ä–∞–Ω–∏—Ü—ã\n"
    "–†–∞–∑–≤–∏–≤–∞–π —Ä–µ—á—å –∏ –¥–∏–∫—Ü–∏—é\n"
    "–ú–æ–∑–≥ –ª—é–±–∏—Ç –∏–ª–ª—é–∑–∏–∏ ‚Äî –Ω–æ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –ø—É—Ç—å\n"
    "–ú–æ–π –¥–µ–≤–∏–∑ - –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"
)

daily_checklist = [
    "‚úÖ –û—Ç–∂–∏–º–∞–Ω–∏—è (15 –º–∏–Ω +1 —Ä–∞–∑ –∫–∞–∂–¥—ã–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å)",
    "‚úÖ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–°–º–æ—Ç—Ä–µ—Ç—å —Ä–æ–ª–∏–∫–∏ –Ω–∞ –∞–Ω–≥–ª)",
    "‚úÖ 1 –∑–∞–¥–∞—á–∞ –ø–æ –¥–µ–≤–æ–ø—Å—É –∫–∞–∂–¥—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å",
    "‚úÖ 15 –º–∏–Ω—É—Ç –∫–Ω–∏–≥–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
    "‚úÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–æ–±—Ä–∞",
    "‚úÖ –†–∞–¥–æ—Å—Ç—å + —Ç–∏—à–∏–Ω–∞"
    "–û—Ç–∂–∏–º–∞–Ω–∏—è (15 –º–∏–Ω +1 —Ä–∞–∑ –∫–∞–∂–¥—ã–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å)",
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–°–º–æ—Ç—Ä–µ—Ç—å —Ä–æ–ª–∏–∫–∏ –Ω–∞ –∞–Ω–≥–ª)",
    "1 –∑–∞–¥–∞—á–∞ –ø–æ –¥–µ–≤–æ–ø—Å—É –∫–∞–∂–¥—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å",
    "15 –º–∏–Ω—É—Ç –∫–Ω–∏–≥–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
    "–°–æ–∑–¥–∞–≤–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–æ–±—Ä–∞",
    "–†–∞–¥–æ—Å—Ç—å + —Ç–∏—à–∏–Ω–∞"
]

affirmations = [line.strip() for line in goals_text.strip().split('\n') if line.strip()]
affirmations = [line for line in goals_text.strip().split('\n') if line]

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
start_keyboard = ReplyKeyboardMarkup([
    ["Start"]
], resize_keyboard=True)
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_keyboard = ReplyKeyboardMarkup(
    [["Start"]], resize_keyboard=True
)

main_keyboard = ReplyKeyboardMarkup([
    ["Today"],
    ["Motivation", "Goals"],
    ["Joke \ud83d\ude08"]
], resize_keyboard=True)
main_keyboard = ReplyKeyboardMarkup(
    [["Today"], ["Motivation", "Goals"], ["Joke"]], resize_keyboard=True
)

# --- –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ---
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_users = set()

# --- –ó–∞–ø—Ä–æ—Å —à—É—Ç–∫–∏ ---
async def fetch_dark_joke():
    async with httpx.AsyncClient() as client:
        try:
            r = await client.get("https://v2.jokeapi.dev/joke/Dark?type=single")
            data = r.json()
            return data.get("joke", "No joke today!")
        except:
            return "Joke fetch failed."
# HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
class DummyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'OK')

def run_fake_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("", port), DummyHandler)
    print(f"Fake HTTP server zapushen na portu {port}")
    server.serve_forever()

threading.Thread(target=run_fake_server, daemon=True).start()

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    active_users.add(user_id)
    await update.message.reply_text(
        "Welcome! Choose an action below:", reply_markup=main_keyboard
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ ---
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if user_id not in active_users:
        if text == "Start":
            active_users.add(user_id)
            await update.message.reply_text("Welcome! Choose an action below:", reply_markup=main_keyboard)
            await update.message.reply_text(
                "Welcome! Choose an action below:", reply_markup=main_keyboard
            )
        else:
            await update.message.reply_text("Press 'Start' to begin üëá", reply_markup=start_keyboard)
            await update.message.reply_text("Press 'Start' to begin", reply_markup=start_keyboard)
        return

    if text == "Today":
        tasks = "\n".join(daily_checklist)
        await update.message.reply_text(f"\ud83d\udcdc Today's checklist:\n{tasks}")
        await update.message.reply_text(f"Today's checklist:\n{tasks}")

    elif text == "Motivation":
        quote = random.choice(affirmations)
        await update.message.reply_text(f"\ud83c\udf1f Motivation:\n{quote}")
        await update.message.reply_text(f"Motivation:\n{quote}")

    elif text == "Goals":
        await update.message.reply_text(goals_text)

    elif text == "Joke \ud83d\ude08":
        joke = await fetch_dark_joke()
    elif text == "Joke":
        joke = await fetch_joke()
        msg = await update.message.reply_text(joke)
        await asyncio.sleep(300)
        try:
@@ -102,25 +116,23 @@
            pass

    else:
        await update.message.reply_text("Unknown command. Choose from the menu ‚¨ÜÔ∏è")

# --- HTTP –¥–ª—è Render ---
class DummyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'OK')

def run_fake_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("", port), DummyHandler)
    print(f"Fake HTTP server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

# --- –ó–∞–ø—É—Å–∫ ---
        await update.message.reply_text("Unknown command. Use the menu.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—É—Ç–æ–∫
async def fetch_joke():
    url = "https://v2.jokeapi.dev/joke/Dark?format=txt"
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url)Add commentMore actions
            return response.text.strip()
    except:
        return "Couldn't fetch joke."

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    threading.Thread(target=run_fake_server, daemon=True).start()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.run_polling()
