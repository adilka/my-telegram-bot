import os
import random
from datetime import time
from http.server import BaseHTTPRequestHandler, HTTPServer
from threading import Thread

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, JobQueue
import httpx  # –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /joke

BOT_TOKEN = os.getenv("BOT_TOKEN")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –∏ –¥–∞–Ω–Ω—ã–µ
goals_text = (
    "–£–ª—É—á—à–∞—Ç—å –¥–µ–≤–æ–ø—Å\n"
    "–ñ–∏—Ç—å –ø–æ –≥—Ä–∞—Ñ–∏–∫—É\n"
    "–í—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
    "–ó–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º\n"
    "–ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É\n"
    "–°–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É\n"
    "–£–º–µ—Ç—å –æ—Ç–¥—ã—Ö–∞—Ç—å\n"
    "–ñ–∏—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ –∏ —Ä–∞–∑–º–µ—Ä–µ–Ω–Ω–æ\n"
    "–ë–æ–≥–∞—Ç—Å—Ç–≤–æ –∏ –¥–æ–±—Ä–æ—Ç–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n"
    "–ë—É–¥—å —Å–æ–±–æ–π, –≥–æ–≤–æ—Ä–∏ —á–µ—Å—Ç–Ω–æ, –∏–¥–∏ —Å–≤–æ–∏–º –ø—É—Ç—ë–º\n"
    "–ü–µ—Ä–µ—Å—Ç–∞—Ç—å —Å—Ç—Ä–∞–¥–∞—Ç—å, –Ω—É–∂–Ω–æ —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –º–µ–ª–æ—á–∞–º –∏ —Ü–µ–Ω–∏—Ç—å –∂–∏–∑–Ω—å\n"
    "–ù–µ –ª–µ–Ω–∏—Å—å, —Å–ª—É—à–∞–π –±–ª–∏–∑–∫–∏—Ö\n"
    "–†–∞–¥—É–π—Å—è –º–æ–º–µ–Ω—Ç—É, —Ü–µ–Ω–∏ –∂–∏–∑–Ω—å\n"
    "–£–±–µ—Ä–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏\n"
    "–ù–µ –±—É–¥—å —Ç–æ–∫—Å–∏—á–Ω—ã–º, –∑–Ω–∞–π –≥—Ä–∞–Ω–∏—Ü—ã\n"
    "–†–∞–∑–≤–∏–≤–∞–π —Ä–µ—á—å –∏ –¥–∏–∫—Ü–∏—é\n"
    "–ú–æ–∑–≥ –ª—é–±–∏—Ç –∏–ª–ª—é–∑–∏–∏ ‚Äî –Ω–æ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –ø—É—Ç—å\n"
    "–ú–æ–π –¥–µ–≤–∏–∑ - –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"
)

daily_checklist = [
    "–û—Ç–∂–∏–º–∞–Ω–∏—è (15 –º–∏–Ω +1 —Ä–∞–∑ –∫–∞–∂–¥—ã–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å)",
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–°–º–æ—Ç—Ä–µ—Ç—å —Ä–æ–ª–∏–∫–∏ –Ω–∞ –∞–Ω–≥–ª)",
    "1 –∑–∞–¥–∞—á–∞ –ø–æ –¥–µ–≤–æ–ø—Å—É –∫–∞–∂–¥—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å",
    "15 –º–∏–Ω—É—Ç –∫–Ω–∏–≥–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
    "–°–æ–∑–¥–∞–≤–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–æ–±—Ä–∞",
    "–†–∞–¥–æ—Å—Ç—å + —Ç–∏—à–∏–Ω–∞"
]

affirmations = [line for line in goals_text.strip().split('\n') if line]

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")

async def goals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(goals_text)

async def daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìù –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(daily_checklist))

async def affirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéØ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è:\n" + random.choice(affirmations))

async def joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = "https://v2.jokeapi.dev/joke/Dark?format=txt"
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, timeout=5.0)
            await update.message.reply_text("üÉè –®—É—Ç–∫–∞:\n" + response.text.strip())
    except Exception:
        await update.message.reply_text("üòÖ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def morning_reminder(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=context.job.chat_id, text="üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ê–¥–∏–ª—å! –°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–∏ —Ü–µ–ª–∏ –∂–¥—É—Ç: /daily")

async def evening_reflection(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=context.job.chat_id, text="üåô –í–µ—á–µ—Ä! –ü–æ–¥—É–º–∞–π: —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è? –ß—Ç–æ –±—ã —É–ª—É—á—à–∏–ª –∑–∞–≤—Ç—Ä–∞?")

# --- HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
class DummyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_dummy_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("", port), DummyHandler)
    print(f"üåê Dummy HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    Thread(target=run_dummy_server, daemon=True).start()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("goals", goals))
    app.add_handler(CommandHandler("daily", daily))
    app.add_handler(CommandHandler("affirmation", affirmation))
    app.add_handler(CommandHandler("joke", joke))

    job_queue: JobQueue = app.job_queue
    job_queue.run_daily(morning_reminder, time=time(hour=5, minute=0), chat_id=430893419)     # 08:00 –ø–æ –ê–ª–º–∞—Ç—ã
    job_queue.run_daily(evening_reflection, time=time(hour=14, minute=30), chat_id=430893419) # 21:30 –ø–æ –ê–ª–º–∞—Ç—ã

    app.run_polling()
